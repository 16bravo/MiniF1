//Fonction pour générer un nombre aléatoire selon une loi normale
function randn_bm() {
    let u = 0, v = 0;
    while (u === 0) u = Math.random(); // Converting [0,1) to (0,1)
    while (v === 0) v = Math.random();
    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
}

function generateNormalRandom(mean, stddev) {
    return mean + stddev * randn_bm();
}

//Temps au tour des pilotes
//Classement des pilotes

//Temps aux stands des pilotes
var pit = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.0044554901142, 0, 0, 25.845873802114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.8240208434399, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 25.8661061080778, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.6276436377134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 41.4732601796176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.155769368948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 45.5075978558563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21.8573125098787, 0, 0, 0, 0, 45.5313774603261, 0, 0, 0, 0, 0, 0, 0, 24.498582742131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.364632920882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24.0305910750735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23.7683142860955, 43.9989610642226, 0, 0, 0, 0, 0, 18.9988891273655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.3446895777281, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46.3259845622144, 25.1524207033684, 0, 0, 0, 0, 21.3713478778513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20.0738492389494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.8745356185945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20.6121713707513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.8552857185413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.9813170586074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44.8428850747866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.2976817497054, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.7936271754456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 23.8914919011042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.2411175397657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.6751307623933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20.9720167507056, 25.9173153866017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20.1604468622713, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21.3341867619155, 0, 0, 0, 0, 0, 0, 0, 0, 49.6176555918828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.8236208302625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.511139574632, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];

//Pneus utilisés par les pilotes
var tyr = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
];

//Humidité de la piste
var wth = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

//Safety car sortie
var sc = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];


/*
//Calcul du temps cumulé tour par tour par 1 pilote
timeT = new Array(20);

for (i = 0; i < 20; i++) {
    timeT[i] = new Array(60);
    timeT[i][0] = time[i][0];
    for (j = 1; j < 60; j++) {
        if (time[i][j] >= 1000) {
            timeT[i][j] = null;
        } else {
            timeT[i][j] = timeT[i][j - 1] + time[i][j];
        }
    }
};
*/

/*
//Gestion des temps trop longs (ex: abandon)
var lr = 3600;
for (i = 0; i < 20; i++) {
    //console.log(timeT[i][60]);																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
    if (timeT[i][59] > lr) { lr = timeT[i][59]; }
};
//console.log(lr/14400);		
*/																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																												

/*
//Position du pilote sur l'axe X (par rapport à son temps)
driver_position_Y = new Array(20);
for (i = 0; i < nb_driver; i++) {
    driver_position_Y[i] = new Array(14400);
    for (j = 0; j < 14400; j++) {
        var tps = j * (lr / 14400);
        var k = 0;
        while (timeT[i][k] < tps) {
            k++;
            driver_position_Y[i][j] = Math.ceil(1038 - ((time[i][k] - (timeT[i][k] - tps)) / time[i][k]) * 1038);
        }
    }
};
//console.log(driver_position_Y);
*/

//Position du pilote sur l'axe Y (par rapport à sa position en course)
//pos = new Array(20);
//posX = new Array(20);

//???
var j = 0;
var best = 1000;
var mt = 0;


//CIRCUIT MAP
//Canvas avec la forme du circuit
cX = [-224, -220, -215, -211, -206, -201, -196, -190, -184, -178, -171, -165, -161, -157, -152, -147, -142, -138, -134, -130, -126, -122, -120, -120, -120, -119, -118, -116, -116, -115, -114, -113, -112, -110, -109, -107, -105, -104, -103, -101, -99, -98, -96, -95, -93, -91, -89, -87, -85, -82, -81, -78, -76, -73, -71, -69, -67, -65, -62, -59, -57, -55, -51, -48, -46, -43, -41, -37, -33, -30, -27, -24, -22, -19, -16, -13, -8, -4, -1, 2, 6, 13, 18, 23, 26, 30, 35, 40, 47, 53, 58, 62, 68, 74, 79, 85, 91, 95, 100, 107, 114, 119, 125, 131, 137, 143, 149, 155, 161, 166, 172, 180, 186, 192, 199, 206, 211, 217, 223, 229, 235, 240, 247, 254, 260, 266, 274, 280, 285, 291, 297, 303, 311, 319, 326, 333, 343, 351, 358, 364, 370, 379, 387, 394, 403, 410, 415, 423, 430, 438, 447, 453, 459, 469, 476, 483, 490, 497, 505, 513, 520, 529, 537, 543, 549, 556, 564, 573, 580, 587, 595, 602, 610, 617, 624, 634, 640, 646, 655, 663, 671, 678, 686, 697, 709, 722, 733, 743, 753, 764, 776, 789, 799, 811, 822, 831, 843, 855, 867, 878, 889, 898, 911, 922, 933, 945, 955, 965, 978, 989, 1000, 1013, 1023, 1033, 1045, 1056, 1067, 1080, 1089, 1101, 1112, 1123, 1135, 1147, 1159, 1178, 1202, 1226, 1248, 1273, 1294, 1311, 1335, 1360, 1382, 1406, 1426, 1444, 1466, 1486, 1495, 1501, 1507, 1510, 1512, 1515, 1516, 1517, 1517, 1516, 1516, 1515, 1513, 1512, 1510, 1508, 1506, 1503, 1501, 1497, 1494, 1491, 1488, 1485, 1481, 1478, 1474, 1470, 1466, 1462, 1458, 1453, 1449, 1445, 1442, 1437, 1431, 1426, 1421, 1416, 1412, 1407, 1402, 1397, 1390, 1386, 1381, 1374, 1368, 1361, 1355, 1350, 1343, 1335, 1329, 1321, 1312, 1306, 1299, 1291, 1284, 1273, 1265, 1258, 1250, 1238, 1226, 1214, 1199, 1189, 1177, 1164, 1151, 1138, 1124, 1113, 1101, 1089, 1077, 1063, 1050, 1038, 1027, 1015, 1003, 988, 976, 964, 954, 941, 928, 914, 901, 889, 879, 867, 853, 840, 826, 815, 805, 793, 778, 765, 751, 738, 728, 712, 685, 659, 632, 605, 585, 562, 534, 509, 487, 476, 468, 461, 454, 447, 439, 431, 425, 419, 411, 406, 400, 395, 391, 387, 382, 378, 374, 370, 368, 365, 362, 360, 356, 355, 354, 351, 350, 349, 348, 347, 346, 345, 345, 344, 344, 346, 349, 352, 357, 363, 368, 373, 378, 383, 388, 393, 398, 405, 409, 413, 420, 426, 431, 437, 442, 446, 453, 459, 465, 472, 476, 481, 489, 500, 508, 519, 526, 533, 542, 553, 563, 573, 578, 584, 590, 595, 600, 606, 611, 614, 617, 620, 623, 626, 627, 628, 629, 630, 632, 632, 633, 634, 635, 636, 636, 636, 637, 638, 638, 638, 639, 639, 640, 641, 642, 642, 643, 644, 645, 646, 648, 649, 651, 652, 654, 655, 657, 660, 662, 665, 669, 672, 674, 678, 682, 687, 692, 695, 699, 704, 709, 714, 718, 723, 729, 734, 739, 744, 749, 754, 758, 763, 767, 771, 775, 779, 782, 787, 791, 795, 799, 802, 805, 809, 813, 817, 820, 823, 825, 829, 831, 834, 838, 840, 842, 843, 844, 845, 846, 847, 847, 848, 848, 848, 848, 848, 848, 848, 848, 848, 848, 847, 847, 847, 847, 846, 846, 846, 846, 846, 846, 845, 845, 845, 845, 845, 845, 845, 847, 849, 851, 853, 857, 860, 863, 866, 870, 873, 876, 879, 883, 886, 889, 892, 896, 900, 903, 907, 911, 914, 918, 921, 924, 928, 931, 935, 939, 943, 947, 951, 954, 957, 961, 966, 971, 979, 984, 988, 993, 1000, 1006, 1012, 1017, 1022, 1027, 1032, 1037, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1051, 1051, 1051, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1051, 1051, 1051, 1051, 1051, 1051, 1050, 1050, 1050, 1050, 1050, 1049, 1049, 1049, 1048, 1048, 1048, 1048, 1048, 1048, 1047, 1047, 1047, 1046, 1046, 1046, 1046, 1045, 1045, 1045, 1045, 1045, 1044, 1044, 1044, 1044, 1043, 1044, 1044, 1044, 1045, 1045, 1046, 1047, 1049, 1051, 1052, 1054, 1056, 1060, 1062, 1066, 1069, 1071, 1075, 1079, 1084, 1088, 1091, 1095, 1100, 1106, 1111, 1115, 1120, 1124, 1128, 1135, 1141, 1146, 1151, 1157, 1163, 1168, 1173, 1179, 1185, 1190, 1196, 1203, 1209, 1215, 1223, 1229, 1234, 1240, 1246, 1252, 1258, 1264, 1271, 1277, 1283, 1290, 1298, 1303, 1309, 1317, 1325, 1334, 1344, 1350, 1357, 1368, 1376, 1384, 1392, 1400, 1408, 1416, 1424, 1434, 1443, 1450, 1457, 1465, 1474, 1484, 1492, 1499, 1508, 1516, 1524, 1532, 1540, 1549, 1556, 1564, 1574, 1582, 1590, 1597, 1604, 1612, 1622, 1629, 1637, 1644, 1650, 1656, 1661, 1666, 1672, 1675, 1677, 1679, 1680, 1679, 1678, 1677, 1675, 1672, 1670, 1668, 1664, 1662, 1660, 1657, 1654, 1651, 1648, 1645, 1641, 1638, 1635, 1632, 1629, 1625, 1622, 1619, 1615, 1611, 1608, 1604, 1600, 1595, 1588, 1582, 1576, 1568, 1563, 1558, 1552, 1545, 1538, 1531, 1526, 1519, 1511, 1505, 1498, 1492, 1486, 1478, 1471, 1465, 1456, 1449, 1440, 1432, 1419, 1409, 1396, 1385, 1376, 1367, 1355, 1343, 1331, 1319, 1310, 1300, 1288, 1276, 1264, 1253, 1244, 1232, 1220, 1206, 1194, 1182, 1171, 1159, 1146, 1132, 1119, 1107, 1095, 1084, 1071, 1057, 1046, 1038, 1030, 1022, 1015, 1008, 998, 990, 983, 977, 971, 962, 954, 947, 938, 931, 925, 918, 911, 903, 894, 888, 881, 872, 865, 857, 850, 844, 836, 828, 821, 812, 804, 799, 793, 785, 777, 769, 761, 755, 747, 740, 732, 725, 718, 711, 704, 696, 688, 680, 670, 661, 651, 639, 628, 615, 605, 596, 585, 574, 561, 550, 539, 530, 520, 509, 496, 485, 475, 464, 455, 443, 431, 421, 410, 400, 395, 389, 382, 378, 373, 369, 365, 359, 354, 350, 344, 338, 333, 326, 317, 310, 302, 295, 289, 283, 275, 267, 259, 252, 246, 240, 232, 224, 216, 210, 203, 196, 189, 181, 174, 166, 161, 154, 146, 138, 131, 124, 117, 111, 103, 95, 88, 81, 74, 68, 60, 53, 45, 35, 22, 10, -6, -21, -35, -51, -64, -76, -91, -107, -121, -137, -150, -161, -177, -192, -207, -223, -236, -248, -262, -274, -286, -297, -305, -311, -317, -319, -320, -320, -319, -319, -317, -315, -312, -309, -305, -302, -297, -291, -284, -278, -273, -268, -261, -254, -248, -241, -234];
cY = [-1588, -1588, -1588, -1587, -1587, -1587, -1587, -1587, -1587, -1588, -1588, -1589, -1589, -1590, -1591, -1592, -1594, -1596, -1598, -1600, -1605, -1609, -1613, -1618, -1623, -1628, -1634, -1638, -1643, -1648, -1652, -1656, -1661, -1666, -1672, -1677, -1681, -1685, -1690, -1696, -1702, -1706, -1710, -1714, -1719, -1723, -1728, -1733, -1738, -1742, -1747, -1751, -1755, -1761, -1766, -1769, -1773, -1778, -1782, -1786, -1790, -1793, -1799, -1804, -1808, -1812, -1815, -1820, -1825, -1829, -1832, -1836, -1839, -1843, -1846, -1850, -1855, -1859, -1862, -1865, -1869, -1874, -1879, -1883, -1886, -1890, -1893, -1897, -1902, -1905, -1908, -1911, -1915, -1918, -1921, -1923, -1926, -1928, -1930, -1933, -1936, -1938, -1940, -1942, -1944, -1946, -1947, -1949, -1950, -1951, -1952, -1953, -1954, -1955, -1955, -1956, -1957, -1957, -1957, -1957, -1957, -1956, -1955, -1955, -1954, -1953, -1951, -1949, -1948, -1947, -1945, -1942, -1940, -1937, -1934, -1931, -1926, -1923, -1919, -1917, -1913, -1909, -1904, -1900, -1896, -1892, -1889, -1885, -1881, -1876, -1872, -1869, -1866, -1861, -1857, -1854, -1850, -1847, -1843, -1839, -1835, -1831, -1827, -1824, -1821, -1818, -1813, -1809, -1805, -1802, -1798, -1794, -1791, -1787, -1783, -1779, -1776, -1772, -1768, -1764, -1760, -1756, -1753, -1747, -1742, -1735, -1730, -1724, -1719, -1714, -1708, -1702, -1696, -1691, -1685, -1680, -1675, -1668, -1663, -1657, -1651, -1647, -1640, -1635, -1629, -1624, -1618, -1613, -1607, -1601, -1596, -1589, -1584, -1580, -1573, -1568, -1562, -1556, -1551, -1545, -1540, -1534, -1528, -1522, -1516, -1506, -1494, -1482, -1470, -1458, -1447, -1438, -1425, -1413, -1401, -1388, -1377, -1366, -1351, -1336, -1328, -1321, -1315, -1309, -1301, -1290, -1282, -1274, -1267, -1261, -1251, -1242, -1234, -1224, -1216, -1210, -1202, -1194, -1186, -1176, -1169, -1162, -1154, -1146, -1139, -1131, -1124, -1116, -1109, -1102, -1094, -1086, -1079, -1074, -1068, -1060, -1052, -1045, -1038, -1031, -1025, -1019, -1012, -1006, -998, -993, -988, -981, -974, -969, -964, -960, -955, -949, -945, -940, -936, -934, -931, -928, -926, -923, -921, -920, -919, -917, -916, -915, -915, -915, -915, -916, -917, -918, -919, -920, -922, -923, -925, -927, -929, -931, -932, -934, -936, -939, -940, -942, -944, -945, -947, -949, -951, -952, -952, -954, -954, -956, -956, -957, -958, -958, -959, -959, -960, -960, -961, -961, -962, -963, -964, -964, -964, -964, -964, -964, -963, -962, -962, -960, -957, -954, -949, -943, -939, -935, -928, -922, -916, -910, -904, -897, -889, -882, -873, -865, -859, -852, -844, -836, -826, -818, -811, -803, -794, -786, -778, -770, -761, -754, -746, -736, -727, -719, -713, -707, -699, -691, -685, -677, -671, -665, -659, -653, -646, -638, -633, -627, -620, -613, -607, -601, -596, -590, -583, -577, -570, -563, -558, -553, -544, -533, -525, -514, -507, -500, -491, -481, -473, -464, -460, -457, -455, -454, -454, -456, -459, -462, -464, -469, -474, -479, -484, -488, -492, -497, -501, -506, -511, -517, -522, -527, -532, -536, -542, -548, -552, -557, -562, -567, -571, -575, -579, -585, -592, -597, -602, -606, -610, -616, -621, -626, -631, -635, -638, -642, -647, -652, -657, -660, -663, -667, -670, -674, -677, -679, -680, -682, -683, -683, -684, -684, -683, -683, -682, -680, -678, -676, -674, -673, -670, -667, -665, -663, -660, -657, -652, -649, -646, -643, -640, -635, -631, -627, -624, -621, -618, -614, -610, -605, -600, -595, -591, -587, -583, -576, -570, -566, -562, -558, -552, -546, -539, -532, -526, -520, -514, -507, -499, -493, -488, -482, -474, -468, -462, -456, -451, -446, -439, -431, -425, -419, -413, -407, -400, -393, -388, -382, -377, -373, -366, -360, -354, -349, -343, -338, -333, -328, -323, -317, -313, -308, -301, -296, -291, -285, -279, -276, -271, -265, -260, -256, -251, -245, -240, -235, -229, -222, -218, -214, -209, -203, -197, -189, -185, -182, -178, -173, -171, -170, -170, -171, -172, -174, -178, -181, -185, -188, -192, -198, -205, -210, -215, -219, -223, -227, -232, -237, -244, -249, -253, -258, -262, -268, -275, -279, -283, -288, -293, -298, -303, -307, -312, -319, -324, -329, -333, -338, -344, -349, -354, -359, -364, -368, -372, -376, -382, -389, -394, -398, -402, -407, -414, -419, -424, -429, -433, -438, -443, -449, -457, -463, -468, -474, -482, -489, -495, -500, -505, -511, -517, -525, -532, -537, -542, -548, -555, -560, -566, -570, -574, -580, -585, -591, -596, -599, -603, -609, -614, -617, -621, -625, -628, -631, -636, -639, -642, -645, -649, -652, -654, -656, -659, -662, -663, -665, -668, -669, -670, -670, -670, -670, -670, -670, -669, -669, -669, -668, -667, -667, -667, -665, -665, -665, -664, -663, -661, -660, -659, -658, -657, -655, -654, -653, -652, -651, -649, -648, -647, -645, -644, -643, -642, -640, -639, -637, -636, -635, -633, -632, -630, -629, -627, -626, -624, -623, -621, -619, -618, -615, -613, -609, -606, -601, -597, -593, -587, -581, -575, -566, -559, -553, -544, -535, -527, -519, -512, -504, -494, -487, -478, -468, -461, -455, -448, -440, -430, -423, -415, -407, -400, -393, -385, -378, -368, -362, -355, -347, -338, -331, -324, -318, -313, -305, -299, -294, -286, -282, -277, -272, -267, -260, -255, -251, -246, -240, -235, -230, -225, -221, -216, -212, -207, -201, -197, -191, -186, -178, -172, -164, -158, -153, -148, -140, -135, -128, -122, -117, -112, -106, -100, -93, -88, -84, -79, -75, -71, -69, -66, -65, -64, -62, -62, -61, -60, -60, -60, -61, -61, -62, -63, -65, -67, -71, -74, -79, -82, -86, -89, -92, -96, -101, -105, -109, -113, -115, -119, -123, -127, -131, -135, -138, -143, -147, -151, -154, -157, -161, -166, -170, -174, -179, -182, -184, -188, -193, -197, -201, -205, -209, -213, -217, -221, -224, -228, -232, -236, -240, -245, -250, -255, -261, -267, -274, -280, -286, -291, -297, -303, -310, -316, -322, -328, -334, -340, -347, -353, -359, -366, -371, -378, -385, -392, -398, -405, -409, -414, -423, -429, -436, -442, -448, -455, -463, -470, -478, -486, -494, -505, -516, -527, -539, -549, -557, -566, -578, -588, -600, -610, -619, -628, -639, -651, -661, -672, -680, -690, -701, -713, -723, -733, -741, -752, -762, -774, -784, -794, -804, -813, -825, -835, -846, -856, -866, -875, -887, -897, -907, -921, -941, -958, -979, -1002, -1023, -1045, -1064, -1081, -1103, -1125, -1146, -1169, -1187, -1204, -1227, -1248, -1269, -1292, -1309, -1327, -1350, -1373, -1397, -1422, -1441, -1463, -1490, -1506, -1514, -1525, -1532, -1537, -1544, -1551, -1556, -1561, -1565, -1569, -1573, -1576, -1580, -1582, -1584, -1586, -1588, -1589, -1589, -1589, -1589];

var canvas = document.getElementById("myCanvas");
if (canvas.getContext) {
    var ctx = canvas.getContext('2d');
    ctx.beginPath();     // Start a new path.																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
    ctx.lineWidth = "5";
    ctx.strokeStyle = "rgb(50,50,50)";
    ctx.fillStyle = 'black';
    ctx.moveTo(cX[0] / 5 + 750, -cY[0] / 5 + 350);
    for (i = 1; i < 1038; i++) {
        ctx.lineTo(cX[i] / 5 + 750, -cY[i] / 5 + 350);
    };
    ctx.fill();
    ctx.stroke();
    ctx.closePath(); // Close the current path.																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
}

//???
var val = 0;

//ANIMATION
//graphic config
let zoom = 5;
let followX = 400;
let followY = -200;

//animation config
var nb_driver = 20;
const duration = 3000; // Durée de l'animation en millisecondes
const fps = 60; // Images par seconde
const frames = duration / (1000 / fps); // Nombre total d'images
let currentFrame = 0; // Compteur d'images
let repeatCount = 0; // Compteur de répétition
const maxRepeats = 60; // Nombre maximum de répétitions = nombre de tours

//driver data config
let total_driver_time = new Array(nb_driver).fill(0);
let diff_driver_time = new Array(nb_driver).fill(0);
let diff_driver_time_previous = new Array(nb_driver).fill(0);
let driver_position = new Array(nb_driver).fill(0).map((_, i) => i * 35 + 75);
let driver_position_previous = new Array(nb_driver).fill(0).map((_, i) => i * 35 + 75);
let driver_position_X = new Array(nb_driver).fill(25);
let driver_position_Y = new Array(nb_driver).fill(0).map((_, i) => i * 35 + 75);

//Fonction d'animation de la course
function move() {
    currentFrame = 0;
    //pos = 0; //init position
    let interval = setInterval(function() {
        frame(interval);
    }, 1000 / fps);
}

function frame(interval) {
    if (currentFrame >= frames) {
        clearInterval(interval);
        repeatCount++;
        if (repeatCount < maxRepeats) {
            document.getElementById('ind').innerHTML = "<strong>LAP </br>" + (repeatCount+1) + "</strong> / " + maxRepeats;
            document.getElementById('rain').style.opacity = wth[repeatCount] / 1000;
            
            for (i = 0; i < nb_driver; i++) {
                //driver_time = generateNormalRandom(80, 1);
                driver_time = generateNormalRandom(80+Math.ceil(i/2), 1);
                total_driver_time[i] += driver_time;
            }

            let leader_total_time = Math.min(...total_driver_time);
            diff_driver_time_previous = diff_driver_time;
            diff_driver_time = total_driver_time.map(value => value - leader_total_time);
            let sorted_times = [...diff_driver_time].sort((a, b) => a - b);
            let val_to_rank = {};

            for (let i = 0; i < sorted_times.length; i++) {
                val_to_rank[sorted_times[i]] = i + 1;
            }

            let driver_ranking = diff_driver_time.map(value => val_to_rank[value]);

            console.log(driver_ranking);

            for (i = 0; i < nb_driver; i++) {
                driver_position_previous[i] = driver_position_Y[i];
                driver_position[i] = (driver_ranking[i] - 1) * 35 + 75; //position at the end of the lap
                //driver_position_X[i] = 25;

                var pL = "pL" + (i + 1);
                var pX = "pX" + (i + 1);
                document.getElementById(pL).style.top = driver_position_Y[i] + 'px';
                document.getElementById(pX).style.top = driver_position_Y[i] + 'px';
                
            };

            move(); // Relance l'animation
        }
    } else {
        //Animation for each driver
        for (i = 0; i < nb_driver; i++) {
            var variation_X = diff_driver_time_previous[i] - diff_driver_time[i];
            var variation_Y = driver_position_previous[i] - driver_position[i];

            var p = "p" + (i + 1);
            var pL = "pL" + (i + 1);
            var pX = "pX" + (i + 1);
            var t = "t" + (i + 1);
            var ty = "ty" + (i + 1);

            driver_position_X[i] -= variation_X / (fps*(duration/1000));
            driver_position_Y[i] -= variation_Y / (fps*(duration/1000));

            document.getElementById(pL).style.top = driver_position_Y[i] + 'px';
            document.getElementById(pL).style.right = driver_position_X[i] + 'px';
            document.getElementById(pX).style.top = driver_position_Y[i] + 'px';
            document.getElementById(t).style.top = driver_position_Y[i] + 'px';
            document.getElementById(ty).style.top = driver_position_Y[i] + 'px';

        };

        currentFrame++;
    }
}

// Démarrer l'animation
move();



/*
function move() {

    var speed = 24;
    var laps = 60;
    var id = setInterval(frame, Math.round(24 / speed));
    
    for (lap = 0 ; lap < laps ; lap++){

        console.log(lap);
        document.getElementById('ind').innerHTML = "<strong>LAP </br>" + lap + "</strong> / " + laps;
        document.getElementById('rain').style.opacity = wth[lap] / 1000;
        //id = setInterval(frame, Math.round(24 / speed));
        id = setInterval(frame, 1000);

    }

    let zoom = 5;
    let followX = 400;
    let followY = -200;

    let total_driver_time = new Array(nb_driver).fill(0);
    let diff_driver_time = new Array(nb_driver).fill(0);
    let driver_position = new Array(nb_driver).fill(0);
    let driver_position_X = new Array(nb_driver).fill(25);

    function frame() {

        console.log("in frame");

        j++;
        if (j < 10000) {

            if (sc[Math.ceil(j / 240)] == 1) {
                document.getElementById('ind').style.color = "yellow"
            }
            else {
                document.getElementById('ind').style.color = "white"
            };

            for (i = 0; i < nb_driver; i++) {
                driver_time = generateNormalRandom(80, 1);
                total_driver_time[i] += driver_time;
            }

            let leader_total_time = Math.min(...total_driver_time);
            diff_driver_time = total_driver_time.map(value => value - leader_total_time);

            let sorted_times = [...diff_driver_time].sort((a, b) => a - b);
            let val_to_rank = {};
            for (let i = 0; i < sorted_times.length; i++) {
                val_to_rank[sorted_times[i]] = i + 1;
            }
            let driver_ranking = diff_driver_time.map(value => val_to_rank[value]);

            for (i = 0; i < nb_driver; i++) {
                driver_position[i] = (driver_ranking[i][0] - 1) * 35 + 25;
                driver_position_X[i] = 25;
                var elt = "pL" + (i + 1);
                document.getElementById(elt).style.top = driver_position[i] + 'px';
            };

            for (i = 0; i < nb_driver; i++) {

                var bfX = diff_driver_time[i];
                var afX = diff_driver_time[i];

                //console.log(afX+" - "+bfX);																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																										

                var elt = "p" + (i + 1);
                var eltL = "pL" + (i + 1);
                var eltX = "pX" + (i + 1);
                var eltT = "t" + (i + 1);
                var eltTy = "ty" + (i + 1);

                var lvl;
                if (j % 240 == 0) {
                    lvl = 240;
                } else {
                    lvl = j % 240;
                };

                driver_position_X[i] = (afX - bfX) * 10 * (lvl / 240) + bfX * 10 + 50;
                //console.log(driver_position_X[i][j]);																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																										

                var bf = ((driver_ranking[i][Math.ceil(j / 240) - 1]));
                var af = ((driver_ranking[i][Math.ceil(j / 240)]));
                driver_position[i] = (af - bf) * 35 * (1 / 240) + driver_position[i];

                document.getElementById(eltL).style.top = driver_position[i] + 50 + 'px';
                document.getElementById(eltL).style.right = driver_position_X[i] + 'px';
                document.getElementById(eltX).style.top = driver_position[i] + 50 + 'px';
                document.getElementById(eltT).style.top = driver_position[i] + 50 + 'px';
                document.getElementById(eltTy).style.top = driver_position[i] + 50 + 'px';

                
                //Disabled while working : Is that for the map ???
                //document.getElementById(elt).style.left = cX[driver_position_Y[i][j + 240]] / zoom - followX + 750 + 'px';
                //document.getElementById(elt).style.top = -cY[driver_position_Y[i][j + 240]] / zoom + followY + 350 + 'px';
                

                var text = "";
                var tps = Math.round(time[i][Math.ceil(j / 240) - 1] * 1000) / 1000;

                var v = i;

                if (tps < best) {
                    best = tps;
                    mt = v;
                }

                if (mt == i) {
                    document.getElementById("clock").style.top = driver_position[i] + 50 + 'px';
                }

                if (diff_driver_time[i][Math.ceil(j / 240)] >= 1000) {
                    text = "OUT";
                    document.getElementById(elt).style.opacity = 0.5;
                    document.getElementById(eltX).style.opacity = 0.5;
                    document.getElementById(eltT).style.opacity = 0.5;
                    document.getElementById(eltT).style.color = "white";
                    document.getElementById(eltL).style.opacity = 0.5;
                    document.getElementById(eltTy).style.opacity = 0;
                } else if (pit[i][Math.ceil(j / 240)] > 0) { //define pit ???
                    text = "IN PIT";
                    document.getElementById(eltT).style.color = "#66dddd";
                } else if (diff_driver_time[i][Math.ceil(j / 240)] < 0.001) {
                    text = "Leader";
                    document.getElementById(eltT).style.color = "white";
                } else {
                    text = "+ " + (Math.round(diff[i][Math.ceil(j / 240) - 1] * 1000) / 1000);
                    document.getElementById(eltT).style.color = "white";
                }

                document.getElementById(eltT).innerHTML = text;

                var tyre = (tyr[i][Math.ceil(j / 240)]); //define tyr ???
                var color = "white";
                var name = " ";

                if (tyre == 1) {
                    color = "red";
                    name = "S";
                } else if (tyre == 2) {
                    color = "yellow";
                    name = "M";
                } else if (tyre == 3) {
                    color = "white";
                    name = "H";
                } else if (tyre == 4) {
                    color = "green";
                    name = "I";
                } else {
                    color = "#0077ff";
                    name = "W";
                }

                document.getElementById(eltTy).innerHTML = (name);
                document.getElementById(eltTy).style.color = color;

                //document.getElementById(eltT).style.color = 'white';																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																										
                //document.getElementById(eltL).innerHTML = posX[i];																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																										
            }
            //document.getElementById("t"+mt).style.color = 'purple';																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											
        } else {
            for (i = 0; i < nb_driver; i++) {

                var bfX = ((diff_driver_time[i])); //??? avant-dernier tour ?
                var afX = ((diff_driver_time[i])); //dernier tour ?

                //console.log(afX+" - "+bfX);																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																								

                var elt = "p" + (i + 1);
                var eltL = "pL" + (i + 1);
                var eltX = "pX" + (i + 1);
                var eltT = "t" + (i + 1);
                var eltTy = "ty" + (i + 1);

                var lvl = 240;

                posX[i] = (afX - bfX) * 10 + bfX * 10 + 50;
                //console.log(posX[i][j]);																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																								

                //var bf = ((driver_ranking[i])); //dernier tour ?
                //var af = ((driver_ranking[i])); //dernier tour ?
                //driver_position[i] = (af - bf) * 35 * (1 / 240) + driver_position[i];

                document.getElementById(eltL).style.top = driver_position[i] + 50 + 'px';
                document.getElementById(eltL).style.right = driver_position_X[i] + 'px';
                document.getElementById(eltX).style.top = driver_position[i] + 50 + 'px';
                document.getElementById(eltT).style.top = driver_position[i] + 50 + 'px';
                document.getElementById(eltTy).style.top = driver_position[i] + 50 + 'px';

                
                //WHAT'S THIS ???
                //document.getElementById(elt).style.left = cX[driver_position_Y[i][14399]] / zoom - followX + 750 + 'px'; //map ???
                //document.getElementById(elt).style.top = -cY[driver_position_Y[i][14399]] / zoom + followY + 350 + 'px'; //map ???
                

                var text = "";
                var tps = Math.round(time[i][58] * 1000) / 1000; //time ???

                var v = i;

                if (tps < best) {
                    best = tps;
                    mt = v;
                }

                if (mt == i) {
                    document.getElementById("clock").style.top = pos[i] + 50 + 'px';
                }

                if (diff[i][59] >= 1000) {
                    text = "OUT";
                    document.getElementById(elt).style.opacity = 0.5;
                    document.getElementById(eltX).style.opacity = 0.5;
                    document.getElementById(eltT).style.opacity = 0.5;
                    document.getElementById(eltT).style.color = "white";
                    document.getElementById(eltL).style.opacity = 0.5;
                    document.getElementById(eltTy).style.opacity = 0;
                } else if (pit[i][59] > 0) {
                    text = "IN PIT";
                    document.getElementById(eltT).style.color = "#66dddd";
                } else if (diff[i][59] < 0.001) {
                    text = "Leader";
                    document.getElementById(eltT).style.color = "white";
                } else {
                    text = "+ " + (Math.round(diff[i][59] * 1000) / 1000);
                    document.getElementById(eltT).style.color = "white";
                }

                document.getElementById(eltT).innerHTML = text;

                var tyre = (tyr[i][59]);
                var color = "white";
                var name = " ";

                if (tyre == 1) {
                    color = "red";
                    name = "S";
                } else if (tyre == 2) {
                    color = "yellow";
                    name = "M";
                } else if (tyre == 3) {
                    color = "white";
                    name = "H";
                } else if (tyre == 4) {
                    color = "green";
                    name = "I";
                } else {
                    color = "#0077ff";
                    name = "W";
                }

                document.getElementById(eltTy).innerHTML = (name);
                document.getElementById(eltTy).style.color = color;

                //document.getElementById(eltT).style.color = 'white';																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																								
                //document.getElementById(eltL).innerHTML = posX[i];																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																								
            }
            clearInterval(id);
        }
    }



}*/					